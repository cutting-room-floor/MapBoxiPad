= API =

The TouxhXML classes map directly to the NSXML classes. NSXMLNode -> CXMLNode, NSXMLDocument -> CXMLDocument, NSXMLElement -> CXMLElement. For obvious reasons you can't mix and match NSXML and TouchXML classes.

The TouxhXML methods map directly to NSXML methods as well, but only a small subset of methods are supported. Constant and enum names are almost equivalent (CXML... vs NSXML...) but constant values will not be equivalent.

= Implementation =

TouchXML parses XML using libxml2 parser APIs. This produces a tree of libxml2 xmlNodePtr objects. Currently the tree is fully created and populated when the CXMLDocument is created. As the tree is traversed via the TouchXML APIs we create CXMLNode/CXMLElement objects to represent nodes. These objects are created lazily (usually only when needed by the calling code) and cached in an NSMutableSet pool and reused as needed. This keeps memory usage relatively low (only objects needed by the calling code are ever created) and extremely simple. For any given libxml2 xmlNodePtr object there will only be one valid CXMLNode object, this is accomplished by storing a (non-retained) pointer to the CXMLNode in the xmlNodePtr's _private member variable.

= XSLT =
libxslt2 is known to use the _private member variable too. So any implementation of xslt in TouchCode will probably need to either copy the tree before transform the copy, or clear out _all_ _private ptrs after transforming.